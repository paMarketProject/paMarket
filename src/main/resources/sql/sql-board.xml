<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.pamarket00.mapper.Mapper">

</mapper>

<!--<?xml version="1.0" encoding="UTF-8"?>-->
<!--&lt;!&ndash;mybatis SQL 매핑 파일을 뜻하는 지시문&ndash;&gt;-->
<!--<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">-->
<!--&lt;!&ndash;mybatis라는 orm 파일의 sql을 저장 mapper/**/sql-*.xml//// mapper는 폴더명. **는 모든 파일과 모든 폴더를 의미.(spring에서)-->
<!--sql-*은 sql-의 이름의 모든 파일명(getResources에 s 붙인이유가 여러 파일을 가져오기 위해서) 이 형식에 맞는 파일 모두 가져와라.&ndash;&gt;-->

<!--&lt;!&ndash;namespace 속성에 지정한 패키지명을 가지고 있는 파일과 아래의 xml 구문을 연동한다는 의미&ndash;&gt;-->
<!--&lt;!&ndash;xml 파일이기 때문에 스프링 프로젝트의 전체 구조를 모르기 때문에 전체 패키지명을 다 입력해야 함!!!!(!아주 중요!!)&ndash;&gt;-->
<!--<mapper namespace="com.bitc.board.mapper.BoardMapper">-->
<!--&lt;!&ndash;    처음부터 완전하게 위치가 동일해야 매치된다.&ndash;&gt;-->

<!--&lt;!&ndash;    주의!! 세미콜론 다 빼야 한다.!!&ndash;&gt;-->

<!--&lt;!&ndash;    데이터 목록 보기 페이지&ndash;&gt;-->
<!--&lt;!&ndash;    실제 sql 쿼리문을 입력하는 부분&ndash;&gt;-->
<!--&lt;!&ndash;    id 속성 : 위에서 지정한 파일에 존재하는 매서드명과 동일하게 입력. 오타생기면 못 찾아감. 주의&ndash;&gt;-->
<!--&lt;!&ndash;    오버로딩 지원되지 않음. 동일한 이름으로 파일만들면 오류 생긴다.&ndash;&gt;-->

<!--&lt;!&ndash;    resultType : 지정한 메서드의 반환값, 자바 기본 타입은 그대로 입력 가능, 사용자가 지정한 데이터 타입은 xml 파일에서-->
<!--        인식하지 못하기 때문에 전체 패키지 명을 다 입력해야 한다. &ndash;&gt;-->
<!--    <select id="selectBoardList" resultType="com.bitc.board.dto.BoardDto">-->
<!--&lt;!&ndash;        id가 일치해야 하고(동일한 id사용 불가. 오버로딩불가.), &ndash;&gt;-->
<!--        <![CDATA[-->
<!--        select idx, title, user_id, create_dt, hit_cnt from t_board2-->
<!--        where deleted_yn = 'N'-->
<!--        order by idx desc-->
<!--    ]]>-->
<!--    </select>-->

<!--&lt;!&ndash;    parameterType : 지정한 메서드의 매개변수가 가지고 있는 데이터 타입, 자바 기본 타입은 그대로 입력, 사용자가 지정한 데이터 타입은-->
<!--        전체 패키지명을 다 입력해야 함.&ndash;&gt;-->
<!--&lt;!&ndash;    변수 선언 : PreparedStatement 방식을 사용하여 지정한 위치에 데이터를 입력하기위해 #{변수명} 형태를 사용-->
<!--        매개변수가 기본 타입일 경우 mapper 파일의 메서드의 변수명을 그대로 사용 가능&ndash;&gt;-->
<!--&lt;!&ndash;    @Param 어노테이션을 사용하여 매개변수의 이름을 지정할 수 있다.&ndash;&gt;-->
<!--&lt;!&ndash;    매개변수가 사용자 지정 타입일 경우 해당 타입의 멤버 변수명을 그대로 사용&ndash;&gt;-->
<!--&lt;!&ndash;상세글보기&ndash;&gt;-->

<!--    <select id="selectBoardDetail" parameterType="int" resultType="com.bitc.board.dto.BoardDto">-->
<!--&lt;!&ndash;        com.bitc.board.dto.BoardDto - 패키지 전체 주소를 다 입력해줘야 한다.&ndash;&gt;-->
<!--        <![CDATA[-->
<!--        select idx, title, contents, user_id, create_dt, hit_cnt from t_board2-->
<!--        where idx = #{idx}-->
<!--]]>-->
<!--    </select>-->

<!--&lt;!&ndash;    글 등록 페이지&ndash;&gt;-->
<!--&lt;!&ndash;    sql 쿼리문안에서 컬럼명이 각각 달라지는 이유&ndash;&gt;-->
<!--&lt;!&ndash;    1. db에서 사용하는 명명법과 자바에서 사용하는 명명법이 다름. db에서는 전부 소문자를 사용하고 단어 두개가 붙는다면 '-'을-->
<!--        사용하는 것이 기본.(snake 명명법) &ndash;&gt;-->
<!--&lt;!&ndash;    2. application.properties를 통해서 카멜 명명법을 사용한다고 설정&ndash;&gt;-->
<!--&lt;!&ndash;    3. parameterType, resultType에 java dto class를 사용한다고 설정했기 때문에 해당 클래스의 멤버 변수명을 사용&ndash;&gt;-->
<!--&lt;!&ndash;    4. mapper 파일에서 @Param 어노테이션을 사용하여 변수명을 설정할 경우 해당 변수명을 사용해야 함&ndash;&gt;-->


<!--    &lt;!&ndash;    5교시 오후시간 추가!!!&ndash;&gt;-->
<!--&lt;!&ndash;    useGeneratedKeys : DBMS가 자동 키 생성을 지원할 경우 자동 키 생성을 사용하겠다는 의미&ndash;&gt;-->
<!--&lt;!&ndash;    keyProperty : 자동으로 생성된 키를 받아서 지정한 컬럼으로 되돌려 줌. useGeneratedKeys가 true가 되면 boardMapper.insertBoard(board); 로 간다(impl클래스)&ndash;&gt;-->
<!--    <insert id="insertBoard" parameterType="com.bitc.board.dto.BoardDto" useGeneratedKeys="true" keyProperty="idx">-->
<!--&lt;!&ndash;        idx는 boardDto클래스 타입에 있다.(get,set한 그 클래스)&ndash;&gt;-->
<!--        <![CDATA[-->
<!--        insert into t_board2 (title, contents, pwd, user_id, create_dt)-->
<!--&#45;&#45;         쿼리문이기 때문에 쿼리문 그대로 사용해야 한다.-->
<!--        values (#{title}, #{contents},'1234', #{userId}, now())-->
<!--&#45;&#45;          boardDto 타입에서 가져오기 때문에 그에 맞춰 자바형식으로 가져온다. 그렇지만 application.properties에 설정을 해놨기 때문에-->
<!--&#45;&#45;          가능한 것이다.-->
<!--]]>-->
<!--    </insert>-->

<!--    <update id="updateBoard" parameterType="com.bitc.board.dto.BoardDto">-->
<!--        <![CDATA[-->
<!--        update t_board2 set title = #{title}, contents = #{contents}, update_dt = now()-->
<!--        where idx = #{idx}-->
<!--            ]]>-->
<!--    </update>-->

<!--&lt;!&ndash;    삭제페이지&ndash;&gt;-->
<!--    <update id="deleteBoard" parameterType="int">-->
<!--        <![CDATA[-->
<!--        update t_board2 set deleted_yn = 'Y'-->
<!--        WHERE idx = #{idx}-->
<!--            ]]>-->
<!--    </update>-->

<!--&lt;!&ndash;    조회수 올리기&ndash;&gt;-->
<!--&lt;!&ndash;    insertBoardFileList 메서드는 매개변수로 BoardFileDto 클래스 타입의 ArrayList를 받아서 사용함&ndash;&gt;-->
<!--&lt;!&ndash;    해당 리스트가 가지고 있는 모든 내용을 사용하기 위해서 foreach를 사용하여 반복실행해야 함&ndash;&gt;-->
<!--&lt;!&ndash;    collection : 매개변수로 사용하는 반복 가능한 객체의 타입을 설정. list, array만 사용가능&ndash;&gt;-->
<!--&lt;!&ndash;    item : collection을 통하여 생성되는 객체 변수명 설정. // 밑에 item 이름을 item이라고 설정해줌. 원하는대로 설정가능&ndash;&gt;-->
<!--&lt;!&ndash;    separator : 데이터의 구분자 설정, separator=","로 해놓은 건 여러 줄이 쉼표를 간격으로 쭉 반복된다. 쉼표로 구분됨&ndash;&gt;-->
<!--    <update id="updateHitCount" parameterType="int">-->
<!--        <![CDATA[-->
<!--        update t_board2 set hit_cnt = hit_cnt + 1-->
<!--        where idx = #{idx}-->
<!--        ]]>-->
<!--    </update>-->
<!--&lt;!&ndash;    5교시 주석해제 해줌&ndash;&gt;-->
<!--    <insert id="insertBoardFileList" parameterType="com.bitc.board.dto.BoardFileDto">-->
<!--        <![CDATA[-->
<!--        INSERT INTO t_file-->
<!--            (board_idx, original_file_name, stored_file_path, file_size, create_id, create_date)-->
<!--        VALUES-->
<!--        ]]>-->
<!--            <foreach collection="list" item="item" separator=",">-->
<!--            (#{item.boardIdx}, #{item.originalFileName}, #{item.storedFilePath},#{item.fileSize} , 'admin', NOW())-->
<!--            </foreach>-->
<!--    </insert>-->
<!--&lt;!&ndash;    추가&ndash;&gt;-->
<!--    <select id="selectBoardFileList" resultType="com.bitc.board.dto.BoardFileDto">-->
<!--        <![CDATA[-->
<!--            SELECT-->
<!--                idx, board_idx, original_file_name,-->
<!--                FORMAT(ROUND(file_size/1024),0) AS file_size-->
<!--&#45;&#45;             AS는 파일 이름 다시 지정해줌.-->
<!--            FROM-->
<!--                t_file-->
<!--            WHERE-->
<!--                board_idx = #{boardIdx}-->
<!--            AND-->
<!--                deleted_yn = 'N'-->
<!--        ]]>-->
<!--    </select>-->
<!--<select id="selectBoardFileInfo" parameterType="map" resultType="com.bitc.board.dto.BoardFileDto">-->
<!--    <![CDATA[-->
<!--        SELECT-->
<!--        original_file_name, stored_file_path, file_size-->
<!--        FROM-->
<!--            t_file-->
<!--        where-->
<!--            idx = #{idx}-->
<!--        and-->
<!--            board_idx = #{boardIdx}-->
<!--        and-->
<!--            deleted_yn = 'N'-->
<!--]]>-->
<!--</select>-->

<!--</mapper>-->